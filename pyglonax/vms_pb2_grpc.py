# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import vms_pb2 as vms__pb2


class VehicleManagementStub(object):
    """The vehicle management service.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.MotionCommand = channel.unary_unary(
                '/glonax.VehicleManagement/MotionCommand',
                request_serializer=vms__pb2.Motion.SerializeToString,
                response_deserializer=vms__pb2.Empty.FromString,
                )
        self.ListenSignal = channel.unary_stream(
                '/glonax.VehicleManagement/ListenSignal',
                request_serializer=vms__pb2.Empty.SerializeToString,
                response_deserializer=vms__pb2.Signal.FromString,
                )


class VehicleManagementServicer(object):
    """The vehicle management service.
    """

    def MotionCommand(self, request, context):
        """Sends a motion command
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListenSignal(self, request, context):
        """Listen for signal updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VehicleManagementServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'MotionCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.MotionCommand,
                    request_deserializer=vms__pb2.Motion.FromString,
                    response_serializer=vms__pb2.Empty.SerializeToString,
            ),
            'ListenSignal': grpc.unary_stream_rpc_method_handler(
                    servicer.ListenSignal,
                    request_deserializer=vms__pb2.Empty.FromString,
                    response_serializer=vms__pb2.Signal.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'glonax.VehicleManagement', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VehicleManagement(object):
    """The vehicle management service.
    """

    @staticmethod
    def MotionCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/glonax.VehicleManagement/MotionCommand',
            vms__pb2.Motion.SerializeToString,
            vms__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListenSignal(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/glonax.VehicleManagement/ListenSignal',
            vms__pb2.Empty.SerializeToString,
            vms__pb2.Signal.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
